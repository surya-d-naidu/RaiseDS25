// filepath: /root/raiseds25/project/server/storage.ts
import { users, type User, type InsertUser, profiles, type Profile, type InsertProfile, 
  abstracts, type Abstract, type InsertAbstract, invitations, type Invitation, type InsertInvitation,
  notifications, type Notification, type InsertNotification, committeeMembers, type CommitteeMember, 
  type InsertCommitteeMember, researchAwards, type ResearchAward, type InsertResearchAward } from "@shared/schema";
import session from "express-session";

export interface IStorage {
  // Users
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  updateUser(id: number, data: Partial<User>): Promise<User | undefined>;
  getAllUsers(): Promise<User[]>;
  
  // Profiles
  getProfile(userId: number): Promise<Profile | undefined>;
  createProfile(profile: InsertProfile & { userId: number }): Promise<Profile>;
  updateProfile(userId: number, data: Partial<InsertProfile>): Promise<Profile | undefined>;
  
  // Abstracts
  getAbstract(id: number): Promise<Abstract | undefined>;
  getAbstractsByUser(userId: number): Promise<Abstract[]>;
  getAllAbstracts(): Promise<Abstract[]>;
  createAbstract(abstract: InsertAbstract & { userId: number }): Promise<Abstract>;
  updateAbstract(id: number, data: Partial<InsertAbstract>): Promise<Abstract | undefined>;
  updateAbstractStatus(id: number, status: string): Promise<Abstract | undefined>;
  deleteAbstract(id: number): Promise<boolean>;
  
  // Invitations
  getInvitation(id: number): Promise<Invitation | undefined>;
  getInvitationByToken(token: string): Promise<Invitation | undefined>;
  getAllInvitations(): Promise<Invitation[]>;
  createInvitation(invitation: InsertInvitation & { senderId: number; token: string }): Promise<Invitation>;
  updateInvitationStatus(token: string, status: string): Promise<Invitation | undefined>;
  deleteInvitation(id: number): Promise<boolean>;
  
  // Notifications
  getNotification(id: number): Promise<Notification | undefined>;
  getActiveNotifications(): Promise<Notification[]>;
  getAllNotifications(): Promise<Notification[]>;
  createNotification(notification: InsertNotification): Promise<Notification>;
  updateNotification(id: number, data: Partial<InsertNotification>): Promise<Notification | undefined>;
  deleteNotification(id: number): Promise<boolean>;
  
  // Committee Members
  getCommitteeMember(id: number): Promise<CommitteeMember | undefined>;
  getCommitteeMembersByCategory(category: string): Promise<CommitteeMember[]>;
  getAllCommitteeMembers(): Promise<CommitteeMember[]>;
  createCommitteeMember(member: InsertCommitteeMember): Promise<CommitteeMember>;
  updateCommitteeMember(id: number, data: Partial<InsertCommitteeMember>): Promise<CommitteeMember | undefined>;
  deleteCommitteeMember(id: number): Promise<boolean>;
  
  // Research Awards
  getResearchAward(id: number): Promise<ResearchAward | undefined>;
  getActiveResearchAwards(): Promise<ResearchAward[]>;
  getAllResearchAwards(): Promise<ResearchAward[]>;
  createResearchAward(award: InsertResearchAward): Promise<ResearchAward>;
  updateResearchAward(id: number, data: Partial<InsertResearchAward>): Promise<ResearchAward | undefined>;
  deleteResearchAward(id: number): Promise<boolean>;
  
  // Helper methods
  getCategoryCode(category: string): string;
  
  // Session store
  sessionStore: session.SessionStore;
}

// Import the DB implementation
import { storage } from './db-storage';

// Export the storage instance
export { storage };